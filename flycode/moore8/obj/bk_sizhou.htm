<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\obj\bk_sizhou.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\obj\bk_sizhou.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060528: Last Updated: Tue Apr 09 14:56:13 2019
<BR><P>
<H3>Maximum Stack Usage =        156 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; entry0_main &rArr; app_rx_task &rArr; Cal_Command &rArr; Flash_Write &rArr; flash_write_in_sub_page
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[d]">Vectors</a>
 <LI><a href="#[12]">InitStack</a>
 <LI><a href="#[e]">Reset</a>
 <LI><a href="#[10]">__user_initial_stackheap</a>
 <LI><a href="#[11]">__rt_div0</a>
 <LI><a href="#[4]">Undefined</a>
 <LI><a href="#[5]">SoftwareInterrupt</a>
 <LI><a href="#[6]">PrefetchAbort</a>
 <LI><a href="#[7]">DataAbort</a>
 <LI><a href="#[8]">IRQ_Handler</a>
 <LI><a href="#[9]">FIQ_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[4]">Undefined</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">Undefined</a><BR>
 <LI><a href="#[5]">SoftwareInterrupt</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">SoftwareInterrupt</a><BR>
 <LI><a href="#[6]">PrefetchAbort</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">PrefetchAbort</a><BR>
 <LI><a href="#[7]">DataAbort</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DataAbort</a><BR>
 <LI><a href="#[11]">__rt_div0</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">__rt_div0</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[b]">Cbk_6050Gotten</a> from thread_imu.o(.text) referenced from thread_imu.o(.text)
 <LI><a href="#[c]">Cbk_IMU_2ms</a> from thread_imu.o(.text) referenced from thread_imu.o(.text)
 <LI><a href="#[7]">DataAbort</a> from vectors.o(Startup) referenced from vectors.o(Startup)
 <LI><a href="#[9]">FIQ_Handler</a> from vectors.o(Startup) referenced from vectors.o(Startup)
 <LI><a href="#[8]">IRQ_Handler</a> from vectors.o(Startup) referenced from vectors.o(Startup)
 <LI><a href="#[6]">PrefetchAbort</a> from vectors.o(Startup) referenced from vectors.o(Startup)
 <LI><a href="#[e]">Reset</a> from init.o(Init) referenced from vectors.o(Startup)
 <LI><a href="#[5]">SoftwareInterrupt</a> from vectors.o(Startup) referenced from vectors.o(Startup)
 <LI><a href="#[4]">Undefined</a> from vectors.o(Startup) referenced from vectors.o(Startup)
 <LI><a href="#[a]">main</a> from main.o(aentry0) referenced from __rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[d]"></a>Vectors</STRONG> (ARM, 0 bytes, Stack size unknown bytes, vectors.o(Startup))

<P><STRONG><a name="[12]"></a>InitStack</STRONG> (ARM, 0 bytes, Stack size unknown bytes, vectors.o(Startup))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset
</UL>

<P><STRONG><a name="[a]"></a>main</STRONG> (ARM, 16 bytes, Stack size 4 bytes, main.o(aentry0))
<BR><BR>[Stack]<UL><LI>Max Depth = 156 + Unknown Stack Size
<LI>Call Chain = main &rArr; entry0_main &rArr; app_rx_task &rArr; Cal_Command &rArr; Flash_Write &rArr; flash_write_in_sub_page
</UL>
<BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry0_main (via BLX)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> __rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
</UL>
<P><STRONG><a name="[14]"></a>SYSirq_FIQ_Handler</STRONG> (ARM, 16 bytes, Stack size 24 bytes, exception.o(aentry1))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SYSirq_FIQ_Handler &rArr; FIQ_Exception &rArr; Uart_isr &rArr; uart_write_fifo
</UL>
<BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Exception (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>

<P><STRONG><a name="[13]"></a>SYSirq_IRQ_Handler</STRONG> (ARM, 16 bytes, Stack size 24 bytes, exception.o(aentry2))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SYSirq_IRQ_Handler &rArr; IRQ_Exception &rArr; I2C1_ExcetpionHandle &rArr; I2c_isr &rArr; I2C_IE
</UL>
<BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Exception (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>

<P><STRONG><a name="[15]"></a>entry0_main</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, main.o(fastcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = entry0_main &rArr; app_rx_task &rArr; Cal_Command &rArr; Flash_Write &rArr; flash_write_in_sub_page
</UL>
<BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_StartReadData
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_Init
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BK2471_Init
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_rx_task
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_imu_task
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main (via BLX)
</UL>

<P><STRONG><a name="[16]"></a>FIQ_Exception</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, exception.o(fastcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = FIQ_Exception &rArr; Uart_isr &rArr; uart_write_fifo
</UL>
<BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSirq_FIQ_Handler (via BLX)
</UL>

<P><STRONG><a name="[17]"></a>IRQ_Exception</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, exception.o(fastcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = IRQ_Exception &rArr; I2C1_ExcetpionHandle &rArr; I2c_isr &rArr; I2C_IE
</UL>
<BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_isr
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_ExcetpionHandle
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_ExcetpionHandle
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bk2401_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSirq_IRQ_Handler (via BLX)
</UL>

<P><STRONG><a name="[f]"></a>__main</STRONG> (ARM, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset
</UL>

<P><STRONG><a name="[22]"></a>__scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[24]"></a>__scatterload_rt2</STRONG> (ARM, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[dc]"></a>__scatterload_null</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[25]"></a>__scatterload_copy</STRONG> (ARM, 40 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[dd]"></a>__scatterload_zeroinit</STRONG> (ARM, 44 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[29]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li (via BLX)
</UL>

<P><STRONG><a name="[de]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[df]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[e0]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[e1]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[e2]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[e3]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[e4]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[e5]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[e6]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[e7]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[e8]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[e9]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[ea]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[eb]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[ec]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[ed]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[ee]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[ef]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[f0]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[f1]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[f2]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[2d]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls (via BLX)
</UL>

<P><STRONG><a name="[f3]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[f4]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[f5]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[f6]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[f7]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[f8]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[f9]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[23]"></a>__rt_entry</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[fa]"></a>__rt_entry_presh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[26]"></a>__rt_entry_sh</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[28]"></a>__rt_entry_li</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via BLX)
</UL>

<P><STRONG><a name="[fb]"></a>__rt_entry_postsh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[2a]"></a>__rt_entry_main</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; exit
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via BX)
</UL>

<P><STRONG><a name="[fc]"></a>__rt_entry_postli_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[ca]"></a>__rt_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via BLX)
</UL>

<P><STRONG><a name="[2c]"></a>__rt_exit_ls</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown (via BLX)
</UL>

<P><STRONG><a name="[fd]"></a>__rt_exit_prels_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[2e]"></a>__rt_exit_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit (via BLX)
</UL>

<P><STRONG><a name="[1b]"></a>app_imu_task</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = app_imu_task &rArr; Control &rArr; writeMotor &rArr; Pwm_SetPwm
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_send
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pilot_Light
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Failsafe_Check
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry0_main
</UL>

<P><STRONG><a name="[1c]"></a>app_rx_task</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = app_rx_task &rArr; Cal_Command &rArr; Flash_Write &rArr; flash_write_in_sub_page
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sticks
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry0_main
</UL>

<P><STRONG><a name="[30]"></a>Control</STRONG> (Thumb, 274 bytes, Stack size 32 bytes, my_control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = Control &rArr; writeMotor &rArr; Pwm_SetPwm
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeMotor
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple (via BLX)
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple (via BLX)
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_imu_task
</UL>

<P><STRONG><a name="[46]"></a>Delay_ms</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_BER_Test
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_BeginTxPN9_Test
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SingleWaveTest
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmod_calibration
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_init
</UL>

<P><STRONG><a name="[41]"></a>Delay</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, common.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU60x0_WriteReg
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU60x0_ReadReg
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_StartRX
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_StartTX
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmod_calibration
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICU_Initial
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICU_SetSysclk96M
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICU_SetSysclk16M
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_flash_qwfr
</UL>

<P><STRONG><a name="[b7]"></a>BigEndian2Little</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = BigEndian2Little
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cbk_6050Gotten
</UL>

<P><STRONG><a name="[3b]"></a>WAIT_IDLE</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, flash_drv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Erase
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_flash_qe
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clr_flash_qwfr
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_FLASH_STATUS
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_FLASH_HPM
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_FLASH_ID
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GD25Q41_init
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GD25D40_init
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_in_sub_page
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_in_sub_page
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WaitForWIP
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_flash_qwfr
</UL>

<P><STRONG><a name="[3a]"></a>GD25D40_init</STRONG> (Thumb, 58 bytes, Stack size 4 bytes, flash_drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAIT_IDLE
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_init
</UL>

<P><STRONG><a name="[3c]"></a>GD25Q41_init</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, flash_drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAIT_IDLE
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_init
</UL>

<P><STRONG><a name="[3d]"></a>GET_FLASH_ID</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, flash_drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAIT_IDLE
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_init
</UL>

<P><STRONG><a name="[3e]"></a>SET_FLASH_HPM</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, flash_drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAIT_IDLE
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_init
</UL>

<P><STRONG><a name="[3f]"></a>GET_FLASH_STATUS</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, flash_drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAIT_IDLE
</UL>

<P><STRONG><a name="[47]"></a>set_flash_clk</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, flash_drv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_init
</UL>

<P><STRONG><a name="[42]"></a>clr_flash_qwfr</STRONG> (Thumb, 54 bytes, Stack size 4 bytes, flash_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = clr_flash_qwfr
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAIT_IDLE
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_set_line_mode
</UL>

<P><STRONG><a name="[43]"></a>flash_set_line_mode</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, flash_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = flash_set_line_mode &rArr; set_flash_qwfr
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clr_flash_qwfr
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_flash_qwfr
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_OTA
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_init
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Command
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_init_my
</UL>

<P><STRONG><a name="[44]"></a>set_flash_qe</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, flash_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = set_flash_qe
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAIT_IDLE
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_init_my
</UL>

<P><STRONG><a name="[45]"></a>flash_init</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, flash_drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_flash_qe
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_set_line_mode
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_flash_clk
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_FLASH_HPM
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_FLASH_ID
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GD25Q41_init
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GD25D40_init
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>

<P><STRONG><a name="[49]"></a>Flash_Erase</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, flash_drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAIT_IDLE
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WaitForWIP
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_OTA
</UL>

<P><STRONG><a name="[4c]"></a>Flash_Read</STRONG> (Thumb, 132 bytes, Stack size 48 bytes, flash_drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_in_sub_page
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_OTA
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_CheckBlankRange
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_CheckBlankPage
</UL>

<P><STRONG><a name="[4d]"></a>Flash_CheckBlankPage</STRONG> (Thumb, 36 bytes, Stack size 264 bytes, flash_drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_blank
</UL>

<P><STRONG><a name="[4f]"></a>Flash_CheckBlankRange</STRONG> (Thumb, 110 bytes, Stack size 288 bytes, flash_drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_blank
</UL>

<P><STRONG><a name="[52]"></a>Flash_Write</STRONG> (Thumb, 144 bytes, Stack size 48 bytes, flash_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = Flash_Write &rArr; flash_write_in_sub_page
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_in_sub_page
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_OTA
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Command
</UL>

<P><STRONG><a name="[5d]"></a>I2C0_IE</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, i2c_drv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_isr
</UL>

<P><STRONG><a name="[56]"></a>I2C_IE</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, i2c_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = I2C_IE
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_isr
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_StartRcvBytes
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_StartSendBytes
</UL>

<P><STRONG><a name="[53]"></a>I2c_Init</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, i2c_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2c_Init &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BK2471_Init
</UL>

<P><STRONG><a name="[58]"></a>I2c_WaitDone</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, i2c_drv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_RcvBytes
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_SendBytes
</UL>

<P><STRONG><a name="[55]"></a>I2c_StartSendBytes</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, i2c_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = I2c_StartSendBytes &rArr; I2C_IE
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IE
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_SendBytes
</UL>

<P><STRONG><a name="[57]"></a>I2c_SendBytes</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, i2c_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = I2c_SendBytes &rArr; I2c_StartSendBytes &rArr; I2C_IE
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_StartSendBytes
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_WaitDone
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU60x0_WriteReg
</UL>

<P><STRONG><a name="[59]"></a>I2c_StartRcvBytes</STRONG> (Thumb, 236 bytes, Stack size 40 bytes, i2c_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = I2c_StartRcvBytes &rArr; I2C_IE
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IE
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_RcvBytes
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cbk_IMU_2ms
</UL>

<P><STRONG><a name="[5a]"></a>I2c_RcvBytes</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, i2c_drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_StartRcvBytes
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_WaitDone
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU60x0_ReadReg
</UL>

<P><STRONG><a name="[5b]"></a>I2c_isr</STRONG> (Thumb, 764 bytes, Stack size 24 bytes, i2c_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = I2c_isr &rArr; I2C_IE
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via BLX)
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IE
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_IE
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_ExcetpionHandle
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_ExcetpionHandle
</UL>

<P><STRONG><a name="[20]"></a>I2C0_ExcetpionHandle</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, i2c_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = I2C0_ExcetpionHandle &rArr; I2c_isr &rArr; I2C_IE
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Exception
</UL>

<P><STRONG><a name="[21]"></a>I2C1_ExcetpionHandle</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, i2c_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = I2C1_ExcetpionHandle &rArr; I2c_isr &rArr; I2C_IE
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Exception
</UL>

<P><STRONG><a name="[fe]"></a>I2c_GetErrorStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, i2c_drv.o(.text), UNUSED)

<P><STRONG><a name="[5e]"></a>ICU_SetSysclk16M</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, icu_drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>

<P><STRONG><a name="[5f]"></a>ICU_SetSysclk96M</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, icu_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ICU_SetSysclk96M
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_init_my
</UL>

<P><STRONG><a name="[60]"></a>ICU_GetSystemClk</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, icu_drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod (via BLX)
</UL>

<P><STRONG><a name="[ff]"></a>ICU_CheckSystem96M</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, icu_drv.o(.text), UNUSED)

<P><STRONG><a name="[100]"></a>ICU_CheckSystem48M</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, icu_drv.o(.text), UNUSED)

<P><STRONG><a name="[63]"></a>ICU_EnableIRQ</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, icu_drv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICU_Initial
</UL>

<P><STRONG><a name="[62]"></a>ICU_EnableFIQ</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, icu_drv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICU_Initial
</UL>

<P><STRONG><a name="[a7]"></a>ICU_DisableIRQ</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, icu_drv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_OTA
</UL>

<P><STRONG><a name="[a6]"></a>ICU_DisableFIQ</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, icu_drv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_OTA
</UL>

<P><STRONG><a name="[61]"></a>ICU_Initial</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, icu_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ICU_Initial
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICU_EnableFIQ
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICU_EnableIRQ
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BK2471_Init
</UL>

<P><STRONG><a name="[6a]"></a>memcpy_2461</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, rf_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = memcpy_2461
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf_Init
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeTxPipe
</UL>

<P><STRONG><a name="[101]"></a>RF_SetMyAddr</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, rf_drv.o(.text), UNUSED)

<P><STRONG><a name="[64]"></a>RF_SetRxPipeAddr</STRONG> (Thumb, 72 bytes, Stack size 48 bytes, rf_drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4 (via BLX)
</UL>

<P><STRONG><a name="[67]"></a>PowerUp_Rf</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rf_drv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToTxMode
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToRxMode
</UL>

<P><STRONG><a name="[6f]"></a>PowerDown_Rf</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rf_drv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf_Init
</UL>

<P><STRONG><a name="[66]"></a>SwitchToRxMode</STRONG> (Thumb, 44 bytes, Stack size 4 bytes, rf_drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerUp_Rf
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_StartRX
</UL>

<P><STRONG><a name="[68]"></a>SwitchToTxMode</STRONG> (Thumb, 44 bytes, Stack size 4 bytes, rf_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SwitchToTxMode
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerUp_Rf
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_StartTX_ACK
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_StartTX
</UL>

<P><STRONG><a name="[69]"></a>ChangeTxPipe</STRONG> (Thumb, 186 bytes, Stack size 28 bytes, rf_drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_2461
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via BLX)
</UL>

<P><STRONG><a name="[a8]"></a>R_RX_PAYLOAD</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, rf_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = R_RX_PAYLOAD
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bk2401_isr
</UL>

<P><STRONG><a name="[7a]"></a>W_TX_PAYLOAD</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, rf_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = W_TX_PAYLOAD
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_StartTX_ACK
</UL>

<P><STRONG><a name="[77]"></a>W_TX_PAYLOAD_NOACK</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, rf_drv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_StartTX
</UL>

<P><STRONG><a name="[7c]"></a>W_ACK_PAYLOAD</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, rf_drv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_StartRX_ACK
</UL>

<P><STRONG><a name="[6b]"></a>kmod_calibration</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, rf_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36 + Unknown Stack Size
<LI>Call Chain = kmod_calibration &rArr; Delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XVR_Init
</UL>

<P><STRONG><a name="[6d]"></a>XVR_Init</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, rf_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = XVR_Init &rArr; kmod_calibration &rArr; Delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmod_calibration
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf_Init
</UL>

<P><STRONG><a name="[6e]"></a>Rf_Init</STRONG> (Thumb, 296 bytes, Stack size 8 bytes, rf_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + Unknown Stack Size
<LI>Call Chain = Rf_Init &rArr; XVR_Init &rArr; kmod_calibration &rArr; Delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XVR_Init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerDown_Rf
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_2461
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_init_my
</UL>

<P><STRONG><a name="[70]"></a>RF_SetTxPower</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, rf_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RF_SetTxPower
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_init_my
</UL>

<P><STRONG><a name="[71]"></a>RF_SingleWaveTest</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, rf_drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>

<P><STRONG><a name="[72]"></a>RF_BeginTxPN9_Test</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, rf_drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>

<P><STRONG><a name="[102]"></a>RF_StopTxPN9_Test</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, rf_drv.o(.text), UNUSED)

<P><STRONG><a name="[73]"></a>RF_BER_Test</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, rf_drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f (via BLX)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv (via BLX)
</UL>

<P><STRONG><a name="[c1]"></a>RF_SetupInterrupt</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, rf_drv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_init_my
</UL>

<P><STRONG><a name="[76]"></a>RF_StartTX</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, rf_drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_TX_PAYLOAD_NOACK
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToTxMode
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>

<P><STRONG><a name="[78]"></a>RF_StartRX</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, rf_drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToRxMode
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_StartRX_ACK
</UL>

<P><STRONG><a name="[79]"></a>RF_StartTX_ACK</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, rf_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RF_StartTX_ACK &rArr; W_TX_PAYLOAD
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_TX_PAYLOAD
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToTxMode
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_send
</UL>

<P><STRONG><a name="[7b]"></a>RF_StartRX_ACK</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, rf_drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_StartRX
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_ACK_PAYLOAD
</UL>

<P><STRONG><a name="[bb]"></a>Timer_IE</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, timer_drv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycleCounterInit
</UL>

<P><STRONG><a name="[7e]"></a>Timer_EnInt</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, timer_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Timer_EnInt
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Init
</UL>

<P><STRONG><a name="[7d]"></a>Timer_Init</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, timer_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Timer_Init &rArr; Timer_EnInt
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_EnInt
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_SetTO_16M
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_SetTO_32K
</UL>

<P><STRONG><a name="[7f]"></a>Timer_SetTO_32K</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, timer_drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Init
</UL>

<P><STRONG><a name="[80]"></a>Timer_SetTO_16M</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, timer_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Timer_SetTO_16M &rArr; Timer_Init &rArr; Timer_EnInt
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_StartReadData
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycleCounterInit
</UL>

<P><STRONG><a name="[88]"></a>Timer_Read</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, timer_drv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Delay
</UL>

<P><STRONG><a name="[82]"></a>timerX_isr</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, timer_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = timerX_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2_isr
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer1_isr
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer0_isr
</UL>

<P><STRONG><a name="[81]"></a>timer0_isr</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, timer_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = timer0_isr &rArr; timerX_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerX_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_isr
</UL>

<P><STRONG><a name="[83]"></a>timer1_isr</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, timer_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = timer1_isr &rArr; timerX_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerX_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_isr
</UL>

<P><STRONG><a name="[84]"></a>timer2_isr</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, timer_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = timer2_isr &rArr; timerX_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerX_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_isr
</UL>

<P><STRONG><a name="[1e]"></a>timer_isr</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, timer_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = timer_isr &rArr; timer2_isr &rArr; timerX_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2_isr
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer1_isr
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer0_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Exception
</UL>

<P><STRONG><a name="[b9]"></a>Timer_SetCbk</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, timer_drv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_StartReadData
</UL>

<P><STRONG><a name="[103]"></a>Timer_GetTOCnt</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, timer_drv.o(.text), UNUSED)

<P><STRONG><a name="[104]"></a>Timer_SetTOCnt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, timer_drv.o(.text), UNUSED)

<P><STRONG><a name="[86]"></a>Timer_Close</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, timer_drv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_WaitTO
</UL>

<P><STRONG><a name="[85]"></a>Timer_WaitTO</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, timer_drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Close
</UL>

<P><STRONG><a name="[87]"></a>Timer_Delay</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, timer_drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Read
</UL>

<P><STRONG><a name="[8b]"></a>Beken_Uart_Tx_Init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, uart_drv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beken_UART_Initial
</UL>

<P><STRONG><a name="[8c]"></a>Beken_Uart_Rx_Init</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uart_drv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beken_UART_Initial
</UL>

<P><STRONG><a name="[89]"></a>Beken_UART_Initial</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, uart_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Beken_UART_Initial &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beken_Uart_Rx_Init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beken_Uart_Tx_Init
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod (via BLX)
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BK2471_Init
</UL>

<P><STRONG><a name="[8d]"></a>Beken_Uart_Read_fifo</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, uart_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Beken_Uart_Read_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_isr
</UL>

<P><STRONG><a name="[8e]"></a>uart_write_fifo</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, uart_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uart_write_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_tx_trigger
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_isr
</UL>

<P><STRONG><a name="[1d]"></a>Uart_isr</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, uart_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Uart_isr &rArr; uart_write_fifo
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write_fifo
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beken_Uart_Read_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Exception
</UL>

<P><STRONG><a name="[8f]"></a>uart_tx_trigger</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, uart_drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send
</UL>

<P><STRONG><a name="[90]"></a>uart_send</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, uart_drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_tx_trigger
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_puts
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_byte
</UL>

<P><STRONG><a name="[91]"></a>uart_send_byte</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, uart_drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[105]"></a>uart_TX_end</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart_drv.o(.text), UNUSED)

<P><STRONG><a name="[a5]"></a>uart_wait_for_txEnd</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uart_drv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_OTA
</UL>

<P><STRONG><a name="[a1]"></a>uart_receive_byte</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, uart_drv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>

<P><STRONG><a name="[92]"></a>uart_puts</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, uart_drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_i_hex_c
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_ui_dec
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_i_hex
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_newline
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_si_dec
</UL>

<P><STRONG><a name="[9c]"></a>itoa_hex</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, uart_drv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_i_hex_c
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_i_hex
</UL>

<P><STRONG><a name="[94]"></a>itoa_dec</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, uart_drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_ui_dec
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoa_dec_s
</UL>

<P><STRONG><a name="[95]"></a>itoa_dec_s</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, uart_drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoa_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_si_dec
</UL>

<P><STRONG><a name="[97]"></a>x_putc</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, uart_drv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_puts
</UL>

<P><STRONG><a name="[96]"></a>x_puts</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, uart_drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_putc
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_puts_all
</UL>

<P><STRONG><a name="[98]"></a>print_si_dec</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, uart_drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoa_dec_s
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_puts
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_puts_all
</UL>

<P><STRONG><a name="[99]"></a>print_newline</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, uart_drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_puts
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_OTA
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_puts_all
</UL>

<P><STRONG><a name="[9a]"></a>x_puts_all</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, uart_drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_newline
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_si_dec
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_puts
</UL>

<P><STRONG><a name="[9b]"></a>print_i_hex</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, uart_drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoa_hex
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_puts
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_OTA
</UL>

<P><STRONG><a name="[9d]"></a>print_ui_dec</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, uart_drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoa_dec
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_puts
</UL>

<P><STRONG><a name="[9e]"></a>print_i_hex_c</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, uart_drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoa_hex
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_puts
</UL>

<P><STRONG><a name="[9f]"></a>fputc</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, uart_drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_byte
</UL>

<P><STRONG><a name="[a0]"></a>fgetc</STRONG> (Thumb, 106 bytes, Stack size 12 bytes, uart_drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_receive_byte
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_byte
</UL>

<P><STRONG><a name="[a3]"></a>udi_wdt_enable</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, enter_ota.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_OTA
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HwSoftReset
</UL>

<P><STRONG><a name="[a2]"></a>HwSoftReset</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, enter_ota.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udi_wdt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Command
</UL>

<P><STRONG><a name="[a4]"></a>Enter_OTA</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, enter_ota.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udi_wdt_enable
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_i_hex
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_newline
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_wait_for_txEnd
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICU_DisableFIQ
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICU_DisableIRQ
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Erase
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_set_line_mode
</UL>

<P><STRONG><a name="[1f]"></a>Bk2401_isr</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, bk_drv_nrf24l01.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Bk2401_isr &rArr; Data_Receive_Anl
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Receive_Anl
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_RX_PAYLOAD
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Exception
</UL>

<P><STRONG><a name="[ad]"></a>delayms</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, bk_drv_mpu6050.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delayms
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_Init
</UL>

<P><STRONG><a name="[aa]"></a>MPU60x0_ReadReg</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, bk_drv_mpu6050.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_RcvBytes
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>

<P><STRONG><a name="[ab]"></a>MPU60x0_WriteReg</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, bk_drv_mpu6050.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MPU60x0_WriteReg &rArr; I2c_SendBytes &rArr; I2c_StartSendBytes &rArr; I2C_IE
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_SendBytes
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_Init
</UL>

<P><STRONG><a name="[ac]"></a>MPU6050_Init</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, bk_drv_mpu6050.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MPU6050_Init &rArr; MPU60x0_WriteReg &rArr; I2c_SendBytes &rArr; I2c_StartSendBytes &rArr; I2C_IE
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU60x0_WriteReg
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayms
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_Init
</UL>

<P><STRONG><a name="[19]"></a>IMU_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, bk_drv_mpu6050.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = IMU_Init &rArr; MPU6050_Init &rArr; MPU60x0_WriteReg &rArr; I2c_SendBytes &rArr; I2c_StartSendBytes &rArr; I2C_IE
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry0_main
</UL>

<P><STRONG><a name="[c2]"></a>Pwm_out_Init</STRONG> (Thumb, 396 bytes, Stack size 16 bytes, bk_motor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Pwm_out_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BK2471_Init
</UL>

<P><STRONG><a name="[af]"></a>Pwm_SetPwm</STRONG> (Thumb, 104 bytes, Stack size 20 bytes, bk_motor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Pwm_SetPwm
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeMotor
</UL>

<P><STRONG><a name="[ae]"></a>constrain_int32</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, bk_motor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeMotor
</UL>

<P><STRONG><a name="[39]"></a>writeMotor</STRONG> (Thumb, 226 bytes, Stack size 40 bytes, bk_motor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = writeMotor &rArr; Pwm_SetPwm
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain_int32
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwm_SetPwm
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control
</UL>

<P><STRONG><a name="[b0]"></a>remote_cal</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, bk_rc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = remote_cal &rArr; __aeabi_cfcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple (via BLX)
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple (via BLX)
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f (via BLX)
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub (via BLX)
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Command
</UL>

<P><STRONG><a name="[34]"></a>Cal_Command</STRONG> (Thumb, 432 bytes, Stack size 24 bytes, bk_rc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = Cal_Command &rArr; Flash_Write &rArr; flash_write_in_sub_page
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HwSoftReset
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_set_line_mode
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul (via BLX)
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f (via BLX)
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd (via BLX)
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_WaitStoppedStatus
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_RequestStopping
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_cal
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_rx_task
</UL>

<P><STRONG><a name="[35]"></a>check_sticks</STRONG> (Thumb, 296 bytes, Stack size 0 bytes, bk_rc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_rx_task
</UL>

<P><STRONG><a name="[a9]"></a>Data_Receive_Anl</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, bk_rc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Data_Receive_Anl
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bk2401_isr
</UL>

<P><STRONG><a name="[33]"></a>Failsafe_Check</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, bk_rc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_imu_task
</UL>

<P><STRONG><a name="[b]"></a>Cbk_6050Gotten</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, thread_imu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Cbk_6050Gotten &rArr; BigEndian2Little
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BigEndian2Little
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4 (via BLX)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread_imu.o(.text)
</UL>
<P><STRONG><a name="[c]"></a>Cbk_IMU_2ms</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, thread_imu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Cbk_IMU_2ms &rArr; I2c_StartRcvBytes &rArr; I2C_IE
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_StartRcvBytes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread_imu.o(.text)
</UL>
<P><STRONG><a name="[1a]"></a>IMU_StartReadData</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, thread_imu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = IMU_StartReadData &rArr; Timer_SetTO_16M &rArr; Timer_Init &rArr; Timer_EnInt
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_SetCbk
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_SetTO_16M
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry0_main
</UL>

<P><STRONG><a name="[b5]"></a>IMU_RequestStopping</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, thread_imu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Command
</UL>

<P><STRONG><a name="[b6]"></a>IMU_WaitStoppedStatus</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, thread_imu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Command
</UL>

<P><STRONG><a name="[bd]"></a>Led_ON</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, board.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pilot_Light
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Init
</UL>

<P><STRONG><a name="[be]"></a>Led_OFF</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, board.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pilot_Light
</UL>

<P><STRONG><a name="[bc]"></a>Led_Init</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Led_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_ON
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BK2471_Init
</UL>

<P><STRONG><a name="[32]"></a>Pilot_Light</STRONG> (Thumb, 128 bytes, Stack size 4 bytes, board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Pilot_Light
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_OFF
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_ON
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_imu_task
</UL>

<P><STRONG><a name="[bf]"></a>flash_init_my</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = flash_init_my &rArr; flash_set_line_mode &rArr; set_flash_qwfr
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICU_SetSysclk96M
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_flash_qe
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_set_line_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BK2471_Init
</UL>

<P><STRONG><a name="[c0]"></a>rf_init_my</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76 + Unknown Stack Size
<LI>Call Chain = rf_init_my &rArr; Rf_Init &rArr; XVR_Init &rArr; kmod_calibration &rArr; Delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SetupInterrupt
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SetTxPower
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BK2471_Init
</UL>

<P><STRONG><a name="[18]"></a>BK2471_Init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84 + Unknown Stack Size
<LI>Call Chain = BK2471_Init &rArr; rf_init_my &rArr; Rf_Init &rArr; XVR_Init &rArr; kmod_calibration &rArr; Delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beken_UART_Initial
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICU_Initial
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_Init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_init_my
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_init_my
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycleCounterInit
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwm_out_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry0_main
</UL>

<P><STRONG><a name="[31]"></a>debug_send</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = debug_send &rArr; RF_StartTX_ACK &rArr; W_TX_PAYLOAD
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_StartTX_ACK
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4 (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_imu_task
</UL>

<P><STRONG><a name="[93]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, strlen.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_puts
</UL>

<P><STRONG><a name="[4b]"></a>__aeabi_memcpy</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_in_sub_page (via BLX)
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_in_sub_page (via BLX)
</UL>

<P><STRONG><a name="[c4]"></a>__rt_memcpy</STRONG> (ARM, 212 bytes, Stack size 0 bytes, rt_memcpy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[106]"></a>_memcpy_lastbytes</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[65]"></a>__aeabi_memcpy4</STRONG> (ARM, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SetRxPipeAddr (via BLX)
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[107]"></a>__aeabi_memcpy8</STRONG> (ARM, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[108]"></a>__rt_memcpy_w</STRONG> (ARM, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[109]"></a>_memcpy_lastbytes_aligned</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[51]"></a>__aeabi_memset</STRONG> (ARM, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_in_sub_page (via BLX)
</UL>

<P><STRONG><a name="[8a]"></a>__aeabi_memclr</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beken_UART_Initial (via BLX)
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_StartReadData (via BLX)
</UL>

<P><STRONG><a name="[c6]"></a>__rt_memclr</STRONG> (ARM, 64 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[c5]"></a>_memset</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[c3]"></a>__aeabi_uread4</STRONG> (ARM, 0 bytes, Stack size 0 bytes, uread4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_send (via BLX)
</UL>

<P><STRONG><a name="[10a]"></a>__rt_uread4</STRONG> (ARM, 32 bytes, Stack size 0 bytes, uread4.o(.text), UNUSED)

<P><STRONG><a name="[b8]"></a>__aeabi_uwrite4</STRONG> (ARM, 0 bytes, Stack size 0 bytes, uwrite4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cbk_6050Gotten (via BLX)
</UL>

<P><STRONG><a name="[10b]"></a>__rt_uwrite4</STRONG> (ARM, 32 bytes, Stack size 0 bytes, uwrite4.o(.text), UNUSED)

<P><STRONG><a name="[10c]"></a>__aeabi_idiv</STRONG> (ARM, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[54]"></a>__aeabi_idivmod</STRONG> (ARM, 380 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beken_UART_Initial (via BLX)
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICU_GetSystemClk (via BLX)
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_Init (via BLX)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_Init (via BLX)
</UL>

<P><STRONG><a name="[10d]"></a>__aeabi_memclr4</STRONG> (ARM, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[10e]"></a>__aeabi_memclr8</STRONG> (ARM, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[10f]"></a>__rt_memclr_w</STRONG> (ARM, 84 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[c7]"></a>_memset_w</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[27]"></a>__user_setup_stackheap</STRONG> (ARM, 96 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[2b]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit (via BLX)
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[110]"></a>__user_libspace</STRONG> (ARM, 12 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[c8]"></a>__user_perproc_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[111]"></a>__user_perthread_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[2f]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit (via BLX)
</UL>

<P><STRONG><a name="[112]"></a>__I$use$semihosting</STRONG> (ARM, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[113]"></a>__use_no_semihosting_swi</STRONG> (ARM, 4 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[114]"></a>__aeabi_uidiv</STRONG> (ARM, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv), UNUSED)

<P><STRONG><a name="[6c]"></a>__aeabi_uidivmod</STRONG> (ARM, 36 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv))
<BR><BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div_large
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div2
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div5
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div8
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoa_dec (via BLX)
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmod_calibration (via BLX)
</UL>

<P><STRONG><a name="[115]"></a>__semihosting_library_function</STRONG> (ARM, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[e]"></a>Reset</STRONG> (ARM, 0 bytes, Stack size unknown bytes, init.o(Init))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitStack
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[10]"></a>__user_initial_stackheap</STRONG> (ARM, 0 bytes, Stack size unknown bytes, init.o(Init))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[11]"></a>__rt_div0</STRONG> (ARM, 0 bytes, Stack size unknown bytes, init.o(Init), UNUSED, KEPT)
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_div0
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_div0
</UL>

<P><STRONG><a name="[5c]"></a>__ARM_common_switch8</STRONG> (ARM, 32 bytes, Stack size 0 bytes, i2c_drv.o(i.__ARM_common_switch8))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SetTxPower (via BLX)
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeTxPipe (via BLX)
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_isr (via BLX)
</UL>

<P><STRONG><a name="[b3]"></a>__aeabi_fadd</STRONG> (ARM, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Command (via BLX)
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_cal (via BLX)
</UL>

<P><STRONG><a name="[cf]"></a>_fadd</STRONG> (ARM, 196 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
</UL>

<P><STRONG><a name="[d6]"></a>__fpl_fcmp_Inf</STRONG> (ARM, 28 bytes, Stack size 0 bytes, fcmpi.o(x$fpl$fcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
</UL>

<P><STRONG><a name="[75]"></a>__aeabi_fdiv</STRONG> (ARM, 0 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_BER_Test (via BLX)
</UL>

<P><STRONG><a name="[d3]"></a>_fdiv</STRONG> (ARM, 396 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[38]"></a>__aeabi_f2uiz</STRONG> (ARM, 0 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control (via BLX)
</UL>

<P><STRONG><a name="[d4]"></a>_ffixu</STRONG> (ARM, 84 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[b1]"></a>__aeabi_i2f</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_cal (via BLX)
</UL>

<P><STRONG><a name="[116]"></a>_fflt</STRONG> (ARM, 48 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt), UNUSED)

<P><STRONG><a name="[74]"></a>__aeabi_ui2f</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_BER_Test (via BLX)
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Command (via BLX)
</UL>

<P><STRONG><a name="[117]"></a>_ffltu</STRONG> (ARM, 40 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu), UNUSED)

<P><STRONG><a name="[37]"></a>__aeabi_cfcmple</STRONG> (ARM, 0 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control (via BLX)
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_cal (via BLX)
</UL>

<P><STRONG><a name="[d5]"></a>_fcmple</STRONG> (ARM, 132 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
</UL>

<P><STRONG><a name="[d9]"></a>__fpl_fcmple_InfNaN</STRONG> (ARM, 0 bytes, Stack size unknown bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frcmple
</UL>

<P><STRONG><a name="[b4]"></a>__aeabi_fmul</STRONG> (ARM, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Command (via BLX)
</UL>

<P><STRONG><a name="[d7]"></a>_fmul</STRONG> (ARM, 256 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[d2]"></a>__fpl_fnaninf</STRONG> (ARM, 160 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffixu
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[d1]"></a>__fpl_fretinf</STRONG> (ARM, 16 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[36]"></a>__aeabi_cfrcmple</STRONG> (ARM, 0 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control (via BLX)
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_cal (via BLX)
</UL>

<P><STRONG><a name="[d8]"></a>_frcmple</STRONG> (ARM, 124 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmple_InfNaN
</UL>

<P><STRONG><a name="[b2]"></a>__aeabi_fsub</STRONG> (ARM, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_cal (via BLX)
</UL>

<P><STRONG><a name="[da]"></a>_fsub</STRONG> (ARM, 256 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[40]"></a>set_flash_qwfr</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, flash_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = set_flash_qwfr
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAIT_IDLE
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_set_line_mode
</UL>

<P><STRONG><a name="[48]"></a>Flash_WaitForWIP</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, flash_drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAIT_IDLE
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Erase
</UL>

<P><STRONG><a name="[4a]"></a>flash_read_in_sub_page</STRONG> (Thumb, 108 bytes, Stack size 64 bytes, flash_drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAIT_IDLE
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read
</UL>

<P><STRONG><a name="[4e]"></a>is_blank</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, flash_drv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_CheckBlankRange
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_CheckBlankPage
</UL>

<P><STRONG><a name="[50]"></a>flash_write_in_sub_page</STRONG> (Thumb, 110 bytes, Stack size 72 bytes, flash_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = flash_write_in_sub_page
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAIT_IDLE
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset (via BLX)
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write
</UL>

<P><STRONG><a name="[4]"></a>Undefined</STRONG> (ARM, 0 bytes, Stack size unknown bytes, vectors.o(Startup))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undefined
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undefined
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(Startup)
</UL>
<P><STRONG><a name="[5]"></a>SoftwareInterrupt</STRONG> (ARM, 0 bytes, Stack size unknown bytes, vectors.o(Startup))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareInterrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(Startup)
</UL>
<P><STRONG><a name="[6]"></a>PrefetchAbort</STRONG> (ARM, 0 bytes, Stack size unknown bytes, vectors.o(Startup))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrefetchAbort
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrefetchAbort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(Startup)
</UL>
<P><STRONG><a name="[7]"></a>DataAbort</STRONG> (ARM, 0 bytes, Stack size unknown bytes, vectors.o(Startup))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataAbort
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataAbort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(Startup)
</UL>
<P><STRONG><a name="[8]"></a>IRQ_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, vectors.o(Startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 84 + Unknown Stack Size
<LI>Call Chain = IRQ_Handler &rArr; SYSirq_IRQ_Handler &rArr; IRQ_Exception &rArr; I2C1_ExcetpionHandle &rArr; I2c_isr &rArr; I2C_IE
</UL>
<BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSirq_IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(Startup)
</UL>
<P><STRONG><a name="[9]"></a>FIQ_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, vectors.o(Startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + Unknown Stack Size
<LI>Call Chain = FIQ_Handler &rArr; SYSirq_FIQ_Handler &rArr; FIQ_Exception &rArr; Uart_isr &rArr; uart_write_fifo
</UL>
<BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSirq_FIQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(Startup)
</UL>
<P><STRONG><a name="[ba]"></a>cycleCounterInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = cycleCounterInit &rArr; Timer_SetTO_16M &rArr; Timer_Init &rArr; Timer_EnInt
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_SetTO_16M
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_IE
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BK2471_Init
</UL>

<P><STRONG><a name="[cd]"></a>__arm_div8</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[cc]"></a>__arm_div5</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[cb]"></a>__arm_div2</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[ce]"></a>__arm_div_large</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[db]"></a>_fadd1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
</UL>

<P><STRONG><a name="[d0]"></a>_fsub1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[c9]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
